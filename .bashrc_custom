# ~/.bashrc_custom: executed by after .bashrc (was originally the .bashrc)

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
#shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
#HISTSIZE=1000
#HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
#alias ll='ls -alF'
#alias la='ls -A'
#alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

clear

### Added by the Heroku Toolbelt
#export PATH="/usr/local/heroku/bin:$PATH"

# optimized version, uses 16 parallel instances of grep,
# giving each 8 files to search
alias cgrep="find . -name '*.[ch]' -print0 -or \
                    -name '*.[ch]pp' -print0 -or \
                    -name '*.[ch]xx' -print0 -or \
                    -name '*.cc' -print0 \
                    | xargs -0 grep -n --color=always"
                    #| xargs -0 -n8 -P16  grep -n --color=always"
alias pygrep="find . -name '*.php' -print0 -or \
                     -name '*.pcgi' -print0 \
                     | xargs -0 grep -n --color=always"
                     #| xargs -0 -n8 -P16 grep -n --color=always"
alias jsgrep="find . -name '*.js' -print0 \
                     | xargs -0 grep -n --color=always"
alias htgrep="find . -name '*.html' -print0 -or \
                     -name '*.htm' -print0 \
                     -name '*.xhtml' -print0 \
                     -name '*.css' -print0 \
                     | xargs -0 grep -n --color=always"
                     #| xargs -0 -n8 -P16 grep -n --color=always"
alias less='less -R'
alias psg='ps aux | head -1; ps aux | grep -v grep | grep'  

alias ls='ls --color'
alias lS='ls'
alias Ls='ls'
alias LS='ls'

alias sl='ls'
alias Sl='ls'
alias sL='ls'
alias SL='ls'

alias ng='ssh ngmaster'
alias NG='ng'
alias Ng='ng'
alias nG='ng'

alias bt='ssh btmaster'
alias BT='bt'
alias Bt='bt'
alias bT='bt'

alias ll='ls -halF --color'

TZ='America/New_York'; export TZ

# this allows you to cd into a local git repo, then push it to
# github, creating it on the site via the API
# From this place: http://viget.com/extend/create-a-github-repo-from-the-command-line
github-create() {
  repo_name=$1
 
  dir_name=`basename $(pwd)`
 
  if [ "$repo_name" = "" ]; then
    echo "Repo name (hit enter to use '$dir_name')?"
    read repo_name
  fi
 
  if [ "$repo_name" = "" ]; then
    repo_name=$dir_name
  fi
  echo "Used repo_name '$repo_name' ..."
  
  # needed to explicitly set this to something false 
  invalid_credentials=0

  username=`git config github.user`
  if [ "$username" = "" ]; then
    echo "Could not find username, run 'git config --global github.user <username>'"
    invalid_credentials=1
  fi
  echo "Used username '$username' ..."
 
  token=`git config github.token`
  if [ "$token" = "" ]; then
    echo "Could not find token, run 'git config --global github.token <token>'"
    invalid_credentials=1
  fi
  echo "Used token '$token' ..."
 
  if [ "$invalid_credentials" == "1" ]; then
    echo "Detected invalid credentials ..."
    return 1
  fi
 
  echo -n "Creating Github repository '$repo_name' ..."
  curl -u "$username:$token" https://api.github.com/user/repos -d '{"name":"'$repo_name'"}' > /dev/null 2>&1
  echo " done."
 
  echo -n "Pushing local code to remote ..."
  git remote add origin git@github.com:$username/$repo_name.git > /dev/null 2>&1
  git push -u origin master > /dev/null 2>&1
  echo " done."
}

alias dr='cd ~/dr/unitColor'
